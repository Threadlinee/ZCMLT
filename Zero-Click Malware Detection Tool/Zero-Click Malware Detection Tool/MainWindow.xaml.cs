using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Windows;

namespace ZeroClickMalwareDetectionTool
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void BrowseFile_Click(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.OpenFileDialog openFileDialog = new Microsoft.Win32.OpenFileDialog();
            openFileDialog.Filter = "All Files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == true)
            {
                txtFilePath.Text = openFileDialog.FileName;
            }
        }

        private void ScanFile_Click(object sender, RoutedEventArgs e)
        {
            string filePath = txtFilePath.Text;
            if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
            {
                txtAlert.Text = "Please select a valid file.";
                return;
            }

            // Show progress bar during scan
            progressBar.Visibility = Visibility.Visible;
            progressBar.Value = 0;

            bool isMalware = IsZeroClickMalware(filePath);

            progressBar.Visibility = Visibility.Collapsed;

            if (isMalware)
            {
                txtAlert.Text = "Malware detected! The file is harmful.";
            }
            else
            {
                txtAlert.Text = "File is safe.";
            }
        }

        private bool IsZeroClickMalware(string filePath)
        {
            try
            {
                // Check for known malware using hashing
                string fileHash = GetFileHash(filePath);
                if (IsKnownMalwareHash(fileHash))
                {
                    return true;
                }

                string fileContent = File.ReadAllText(filePath);
                if (ContainsSuspiciousPatterns(fileContent))
                {
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                txtAlert.Text = $"Error scanning file: {ex.Message}";
                return false;
            }
        }

        private string GetFileHash(string filePath)
        {
            using (var sha256 = SHA256.Create())
            using (var stream = File.OpenRead(filePath))
            {
                byte[] hashBytes = sha256.ComputeHash(stream);
                return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
            }
        }

        private bool IsKnownMalwareHash(string fileHash)
        {
            // Known malware hashes (example, replace with actual known hashes)
            string[] knownMalwareHashes = new string[]
            {
                "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", // Example: SHA256 of a known malware file
                // Add other hashes here
            };

            return knownMalwareHashes.Contains(fileHash);
        }

        // Check for suspicious patterns in the file content (optional)
        private bool ContainsSuspiciousPatterns(string content)
        {
            string[] suspiciousPatterns = new string[] { "malicious", "payload", "trojan", "virus" };

            foreach (var pattern in suspiciousPatterns)
            {
                if (content.Contains(pattern, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }

            return false;
        }
    }
}
